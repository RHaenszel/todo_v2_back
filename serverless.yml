# For full config options, check the docs:
#    docs.serverless.com

service: todo-v2-back

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.todoTableName}

custom:
  todoTableName: todo-table-${self:provider.stage}
  # dynamodb:
  #   stages:
  #     - dev
  #   start:
  #     migrate: true
  #     port: 8000
  # serverless-offline:
  #   resourceRoutes: true # HTTP proxy

plugins:
  - serverless-iam-roles-per-function
  # - serverless-dynamodb-local
  # - serverless-offline

functions:
  getAllTodos:
    handler: index.handler
    name: handler
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: todos/
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt TodoTable.Arn
  getTodoById:
    handler: index.handler
    name: handler
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: todo/{todoId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt TodoTable.Arn
  updateTodo:
    handler: index.handler
    name: handler
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: todo/{todoId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt TodoTable.Arn
  createTodo:
    handler: index.handler
    name: handler
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: todo/
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt TodoTable.Arn
  deleteTodo:
    handler: index.handler
    name: handler
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: todo/{todoId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt TodoTable.Arn

resources:
  Resources:
    TodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.todoTableName}
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1